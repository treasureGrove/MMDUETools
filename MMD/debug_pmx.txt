#pragma once

#include "CoreMinimal.h"

class UELOG_API UEDebugger
{
public:
    static void DebugPMXBasic(const FString& FilePath)
    {
        if (!FPlatformFileManager::Get().GetPlatformFile().FileExists(*FilePath))
        {
            UE_LOG(LogTemp, Error, TEXT("文件不存在: %s"), *FilePath);
            return;
        }

        TArray<uint8> FileData;
        if (!FFileHelper::LoadFileToArray(FileData, *FilePath))
        {
            UE_LOG(LogTemp, Error, TEXT("无法读取文件: %s"), *FilePath);
            return;
        }

        UE_LOG(LogTemp, Warning, TEXT("调试模式: 文件大小 %d 字节"), FileData.Num());
        FMemoryReader Reader(FileData);
        Reader.SetByteSwapping(false);

        // 只读取签名
        char Signature[5] = {0};
        Reader.Serialize(Signature, 4);
        UE_LOG(LogTemp, Warning, TEXT("文件签名: %s"), ANSI_TO_TCHAR(Signature));

        if (FMemory::Memcmp(Signature, "PMX ", 4) != 0)
        {
            UE_LOG(LogTemp, Error, TEXT("不是有效的PMX文件"));
            return;
        }

        // 读取版本
        float Version;
        Reader << Version;
        UE_LOG(LogTemp, Warning, TEXT("PMX版本: %.2f"), Version);

        // 读取标志数量
        uint8 FlagCount;
        Reader << FlagCount;
        UE_LOG(LogTemp, Warning, TEXT("标志数量: %d"), FlagCount);

        // 跳过所有标志
        Reader.Seek(Reader.Tell() + FlagCount);

        // 现在尝试读取第一个字符串 (模型名)
        int32 NameLength;
        Reader << NameLength;
        UE_LOG(LogTemp, Warning, TEXT("模型名长度: %d，当前位置: %lld"), NameLength, Reader.Tell());

        if (NameLength <= 0 || NameLength > 1000)
        {
            UE_LOG(LogTemp, Error, TEXT("模型名长度异常"));
            return;
        }

        // 读取UTF-16LE字符串数据
        TArray<uint8> NameData;
        NameData.SetNumUninitialized(NameLength);
        Reader.Serialize(NameData.GetData(), NameLength);

        UE_LOG(LogTemp, Warning, TEXT("成功读取 %d 字节的名称数据"), NameData.Num());
        UE_LOG(LogTemp, Warning, TEXT("前8字节: %02X %02X %02X %02X %02X %02X %02X %02X"), 
               NameData[0], NameData[1], NameData[2], NameData[3], 
               NameData[4], NameData[5], NameData[6], NameData[7]);
    }
};
