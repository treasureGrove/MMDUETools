// 简化的PMX测试 - 只解析到第一个字符串
// 添加到 TPMXParser.h 作为测试函数

static bool TestPMXBasic(const FString& FilePath)
{
    UE_LOG(LogTemp, Warning, TEXT("=== PMX基础测试开始 ==="));
    
    if (!FPlatformFileManager::Get().GetPlatformFile().FileExists(*FilePath))
    {
        UE_LOG(LogTemp, Error, TEXT("文件不存在: %s"), *FilePath);
        return false;
    }

    TArray<uint8> FileData;
    if (!FFileHelper::LoadFileToArray(FileData, *FilePath))
    {
        UE_LOG(LogTemp, Error, TEXT("无法读取文件: %s"), *FilePath);
        return false;
    }
    
    UE_LOG(LogTemp, Warning, TEXT("文件大小: %d 字节"), FileData.Num());
    FMemoryReader Reader(FileData);
    Reader.SetByteSwapping(false);

    // 1. 读取签名
    char Signature[5] = {0};
    Reader.Serialize(Signature, 4);
    UE_LOG(LogTemp, Warning, TEXT("签名: %s"), ANSI_TO_TCHAR(Signature));
    
    // 2. 读取版本
    float Version;
    Reader << Version;
    UE_LOG(LogTemp, Warning, TEXT("版本: %.2f"), Version);
    
    // 3. 读取标志数量
    uint8 FlagCount;
    Reader << FlagCount;
    UE_LOG(LogTemp, Warning, TEXT("标志数量: %d"), FlagCount);
    
    // 4. 读取所有标志
    uint8 Encoding = 0;
    if (FlagCount >= 1) Reader << Encoding;
    if (FlagCount >= 2) { uint8 temp; Reader << temp; }
    if (FlagCount >= 3) { uint8 temp; Reader << temp; }
    if (FlagCount >= 4) { uint8 temp; Reader << temp; }
    if (FlagCount >= 5) { uint8 temp; Reader << temp; }
    if (FlagCount >= 6) { uint8 temp; Reader << temp; }
    if (FlagCount >= 7) { uint8 temp; Reader << temp; }
    if (FlagCount >= 8) { uint8 temp; Reader << temp; }
    
    UE_LOG(LogTemp, Warning, TEXT("编码: %d，当前位置: %lld"), Encoding, Reader.Tell());
    
    // 5. 尝试读取第一个字符串长度
    if (Reader.Tell() + 4 > Reader.TotalSize())
    {
        UE_LOG(LogTemp, Error, TEXT("无法读取字符串长度"));
        return false;
    }
    
    int32 NameLength;
    Reader << NameLength;
    UE_LOG(LogTemp, Warning, TEXT("模型名长度: %d"), NameLength);
    
    if (NameLength < 0 || NameLength > 1000)
    {
        UE_LOG(LogTemp, Error, TEXT("模型名长度异常: %d"), NameLength);
        return false;
    }
    
    if (NameLength == 0)
    {
        UE_LOG(LogTemp, Warning, TEXT("模型名为空"));
        return true;
    }
    
    // 6. 读取字符串数据
    if (Reader.Tell() + NameLength > Reader.TotalSize())
    {
        UE_LOG(LogTemp, Error, TEXT("字符串数据不足"));
        return false;
    }
    
    TArray<uint8> NameData;
    NameData.SetNumUninitialized(NameLength);
    Reader.Serialize(NameData.GetData(), NameLength);
    
    UE_LOG(LogTemp, Warning, TEXT("成功读取字符串数据，前8字节: %02X %02X %02X %02X %02X %02X %02X %02X"), 
           NameData[0], NameData[1], NameData[2], NameData[3], 
           NameData[4], NameData[5], NameData[6], NameData[7]);
    
    UE_LOG(LogTemp, Warning, TEXT("=== PMX基础测试完成 ==="));
    return true;
}

// 在MMDViewPanel::LoadMMDModel中调用:
// if (!TPMXParser::TestPMXBasic(SelectedPath)) return;
